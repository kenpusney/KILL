/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = /^[ \t]/,
      peg$c1 = peg$classExpectation([" ", "\t"], false, false),
      peg$c2 = "\n",
      peg$c3 = peg$literalExpectation("\n", false),
      peg$c4 = "let",
      peg$c5 = peg$literalExpectation("let", false),
      peg$c6 = "if",
      peg$c7 = peg$literalExpectation("if", false),
      peg$c8 = "then",
      peg$c9 = peg$literalExpectation("then", false),
      peg$c10 = "else",
      peg$c11 = peg$literalExpectation("else", false),
      peg$c12 = "end",
      peg$c13 = peg$literalExpectation("end", false),
      peg$c14 = "in",
      peg$c15 = peg$literalExpectation("in", false),
      peg$c16 = ";",
      peg$c17 = peg$literalExpectation(";", false),
      peg$c18 = "true",
      peg$c19 = peg$literalExpectation("true", false),
      peg$c20 = "false",
      peg$c21 = peg$literalExpectation("false", false),
      peg$c22 = ":=",
      peg$c23 = peg$literalExpectation(":=", false),
      peg$c24 = "->",
      peg$c25 = peg$literalExpectation("->", false),
      peg$c26 = "#",
      peg$c27 = peg$literalExpectation("#", false),
      peg$c28 = function() { return null },
      peg$c29 = ",",
      peg$c30 = peg$literalExpectation(",", false),
      peg$c31 = function() {  },
      peg$c32 = "\\",
      peg$c33 = peg$literalExpectation("\\", false),
      peg$c34 = function(id) {return id;},
      peg$c35 = "\"",
      peg$c36 = peg$literalExpectation("\"", false),
      peg$c37 = "b",
      peg$c38 = peg$literalExpectation("b", false),
      peg$c39 = "e",
      peg$c40 = peg$literalExpectation("e", false),
      peg$c41 = "n",
      peg$c42 = peg$literalExpectation("n", false),
      peg$c43 = "r",
      peg$c44 = peg$literalExpectation("r", false),
      peg$c45 = "t",
      peg$c46 = peg$literalExpectation("t", false),
      peg$c47 = /^[a-eA-E\-0-9]/,
      peg$c48 = peg$classExpectation([["a", "e"], ["A", "E"], "-", ["0", "9"]], false, false),
      peg$c49 = function(seq) {return seq.join("")},
      peg$c50 = function(str) {return node_string(str);},
      peg$c51 = function(nd) {return nd.join("")},
      peg$c52 = /^[^"\\]/,
      peg$c53 = peg$classExpectation(["\"", "\\"], true, false),
      peg$c54 = function(x) {return x;},
      peg$c55 = function(x) {return escape_mapping[x];},
      peg$c56 = "\\u",
      peg$c57 = peg$literalExpectation("\\u", false),
      peg$c58 = function(uni) {return String.fromCodePoint(parseInt(uni, 16));},
      peg$c59 = "(",
      peg$c60 = peg$literalExpectation("(", false),
      peg$c61 = ")",
      peg$c62 = peg$literalExpectation(")", false),
      peg$c63 = function() {return node_unit();},
      peg$c64 = function(bool) {
          return node_boolean(bool === "true");
      },
      peg$c65 = /^[+|<>\-*%\^&:.?!\/\\~=]/,
      peg$c66 = peg$classExpectation(["+", "|", "<", ">", "-", "*", "%", "^", "&", ":", ".", "?", "!", "/", "\\", "~", "="], false, false),
      peg$c67 = function(op) {
              if (reserved_symbols.indexOf(op.join("")) > -1) {
                  return false;
              }
              return true;
          },
      peg$c68 = function(op) {return node_binexpr(op.join(""))},
      peg$c69 = /^[_a-zA-Z\-$]/,
      peg$c70 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"], "-", "$"], false, false),
      peg$c71 = function(id) {
        	 if (keywords.indexOf(id.join("")) > -1) {
           	return false;
           }
           return true;
         },
      peg$c72 = function(id) {return node_ident(id.join(""))},
      peg$c73 = /^[0-9]/,
      peg$c74 = peg$classExpectation([["0", "9"]], false, false),
      peg$c75 = function(ds) {
          return node_number(parseInt(ds.join(""),10));
      },
      peg$c76 = function(stmt, stmts) {return util_concat([stmt], stmts)},
      peg$c77 = function(stmt, comment) {return node_statement(stmt, comment);},
      peg$c78 = /^[^\n]/,
      peg$c79 = peg$classExpectation(["\n"], true, false),
      peg$c80 = function(comment) {return node_comment(comment.join(""));},
      peg$c81 = function(l) {return l},
      peg$c82 = function(cond, conseq, alter) {return node_condition(cond, conseq, alter);},
      peg$c83 = function(s, bin) {
      	if (bin) return bin(s);
          return s;
      },
      peg$c84 = function(exp) { return exp },
      peg$c85 = function(op, f, bin) {
          return function(left) {
              op.left = left;
              op.right = f
          	if (bin) {
                  return bin(op);
              }
              return op;
          }
      },
      peg$c86 = function(l, p) { return node_funcall(l, p) },
      peg$c87 = function(es) { return es ? es : [] },
      peg$c88 = function(e, ie) { return ie },
      peg$c89 = function(e, es) { return util_concat([e], es); },
      peg$c90 = "[",
      peg$c91 = peg$literalExpectation("[", false),
      peg$c92 = "]",
      peg$c93 = peg$literalExpectation("]", false),
      peg$c94 = ":",
      peg$c95 = peg$literalExpectation(":", false),
      peg$c96 = function(l, r) { return pair(l, r) },
      peg$c97 = "{",
      peg$c98 = peg$literalExpectation("{", false),
      peg$c99 = "}",
      peg$c100 = peg$literalExpectation("}", false),
      peg$c101 = function(obj, acc) {
          if (acc && acc.length) {
              return node_accessor(obj, acc);
          }
          return obj
      },
      peg$c102 = function(l, bs) {
      	return node_letbinding(bs);
      },
      peg$c103 = function(b, bi) {return bi;},
      peg$c104 = function(b, bs) {return util_concat([b], bs);},
      peg$c105 = function(name, exp) {return node_binding(name, exp);},
      peg$c106 = function(ps, exp) {return token_lambda({params: ps?[ps]:[], body: exp});},
      peg$c107 = function(p, exp) {return token_lambda({params: [p], body: exp});},
      peg$c108 = function(p, l) {return token_lambda({params: [p], body: l})},
      peg$c109 = function(method) {
          if (method == null) {
             error("must specify accessor after #")
          }
          return method;
      },
      peg$c110 = function(id, args) { return args ? node_method_call(id, args) : id },
      peg$c111 = function(e, es) {return es.length? [e].concat(es): [e];},
      peg$c112 = "|",
      peg$c113 = peg$literalExpectation("|", false),
      peg$c114 = function(exp, bind) {
          return node_comprehension(
          		bind
                      .slice(0)
                      .reverse()
                      .reduce((a,b) => token_lambda({params: [b[0]], body: a}),
                              exp),
          		bind)
      },
      peg$c115 = function(id, exp, expi) {return expi;},
      peg$c116 = function(id, exp, cond) {
          return {name: id, value: exp, condition: cond};
      },
      peg$c117 = function(i, ii) {return ii},
      peg$c118 = function(i, ins) {
          return [i].concat(ins);
      },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parsestmts();

    return s0;
  }

  function peg$parseblank() {
    var s0;

    if (peg$c0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parsenewline() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    return s0;
  }

  function peg$parsesymbol_let() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c4) {
      s0 = peg$c4;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }

    return s0;
  }

  function peg$parsesymbol_if() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c6) {
      s0 = peg$c6;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parsesymbol_then() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c8) {
      s0 = peg$c8;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }

    return s0;
  }

  function peg$parsesymbol_else() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c10) {
      s0 = peg$c10;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    return s0;
  }

  function peg$parsesymbol_end() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }

    return s0;
  }

  function peg$parsesymbol_in() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }

    return s0;
  }

  function peg$parsesymbol_comment() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c16;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsesymbol_true() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c18) {
      s0 = peg$c18;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsesymbol_false() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    return s0;
  }

  function peg$parseop_bind() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parseop_arrow() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }

    return s0;
  }

  function peg$parseop_access() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 35) {
      s0 = peg$c26;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }

    return s0;
  }

  function peg$parsedelim() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }

    return s0;
  }

  function peg$parsebnl() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseblank();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseblank();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenewline();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblank();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseblank();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesep() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseblank();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseblank();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c29;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenewline();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblank();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblank();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c31();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparam() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseid();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c34(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseescaped() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c32;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c35;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 98) {
          s0 = peg$c37;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 101) {
            s0 = peg$c39;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 110) {
              s0 = peg$c41;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 114) {
                s0 = peg$c43;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 116) {
                  s0 = peg$c45;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseunicode_seq() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c47.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestring_literal();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring_literal() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenon_dquote();
    if (s2 === peg$FAILED) {
      s2 = peg$parseescape();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsenon_dquote();
      if (s2 === peg$FAILED) {
        s2 = peg$parseescape();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c51(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedquote() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parsenon_dquote() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c52.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c54(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseescape() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseescaped();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c56) {
        s1 = peg$c56;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseunicode_seq();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseunit() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 41) {
        s2 = peg$c61;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebools() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesymbol_true();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesymbol_false();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c64(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoperator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c65.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c65.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c67(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c68(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseid() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c69.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c71(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c72(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedigits() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c73.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c73.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestmts() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsestmt();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedelim();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsedelim();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestmts();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c76(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestmt() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parselet();
    if (s1 === peg$FAILED) {
      s1 = peg$parseexp();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c77(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment();
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseblank();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseblank();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesymbol_comment();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c78.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c78.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c80(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexp() {
    var s0;

    s0 = peg$parseif();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinfixexp();
    }

    return s0;
  }

  function peg$parseinfixexp() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parselexp();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c81(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselexp() {
    var s0;

    s0 = peg$parselambda();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefexp();
    }

    return s0;
  }

  function peg$parseif() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parsesymbol_if();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefexp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesymbol_then();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebnl();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexp();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsebnl();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsesymbol_else();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsebnl();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseexp();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c82(s3, s7, s11);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefexp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesexp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebinexpr();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c83(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesexp() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c61;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c62); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c84(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsefuncall();
      if (s0 === peg$FAILED) {
        s0 = peg$parseaexp();
      }
    }

    return s0;
  }

  function peg$parsebinexpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseoperator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesexp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinexpr();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c85(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefuncall() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseaexp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseenclosed_expr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c86(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseenclosed_expr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseseperated_expr();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c61;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebnl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseseperated_expr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c29;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsebnl();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexp();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c88(s1, s7);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c29;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsebnl();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexp();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c88(s1, s7);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c89(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselist() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c90;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c91); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseseperated_expr();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c92;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebnl();
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomprehension();
    }

    return s0;
  }

  function peg$parsepair() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c94;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexp();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c96(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseliteral();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebnl();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c94;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsebnl();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexp();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c96(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseobject_literal() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c97;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsepair();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebnl();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c29;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parsebnl();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsepair();
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c29;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c30); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsebnl();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsepair();
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c99;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c100); }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaexp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseobj();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseaccessor_expr();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseaccessor_expr();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c101(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselet() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesymbol_let();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebindings();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c102(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebindings() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsebinding();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsesep();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsebnl();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsebinding();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c103(s1, s6);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsesep();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebnl();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsebinding();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c103(s1, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c104(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebinding() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseop_bind();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexp();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c105(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselambda() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseparam();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseop_arrow();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebnl();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexp();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesep();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c106(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseparam();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblank();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexp();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesep();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c107(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseparam();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsebnl();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselambda();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c108(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseliteral() {
    var s0;

    s0 = peg$parsedigits();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebools();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunit();
        if (s0 === peg$FAILED) {
          s0 = peg$parselist();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestring();
            if (s0 === peg$FAILED) {
              s0 = peg$parseobject_literal();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseobj() {
    var s0;

    s0 = peg$parseliteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseid();
    }

    return s0;
  }

  function peg$parseaccessor_expr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseop_access();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseaccessor();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c109(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaccessor() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseenclosed_expr();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c110(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseliteral();
    }

    return s0;
  }

  function peg$parsequote() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexp();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseexp();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseexp();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c61;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c111(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomprehension() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c90;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c91); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenewline();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebnl();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 124) {
                  s7 = peg$c112;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c113); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsebnl();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsein_bindings();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsebnl();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s11 = peg$c92;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c93); }
                        }
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c114(s3, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsein_binding() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebnl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesymbol_in();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebnl();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexp();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsebnl();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsesymbol_if();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsebnl();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseexp();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c115(s1, s5, s10);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c116(s1, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsein_bindings() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsein_binding();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsesep();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsein_binding();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c117(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsesep();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsein_binding();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c117(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }



  function Token(tag, value=undefined, isKeyword = false, isOperator = false) {
  	this.tag = tag;
      this.value = value || [];
      this.isKeyword = isKeyword;
      this.isOperator = isOperator;
  };

  function pair(left, right) {
      return {
          tag: "pair",
          type: "pair",
          left: left, 
          right: right
      }
  }

  function node_ident(repr) {
      return {
          tag: "id",
          repr: repr
      }
  }

  function node_number(val) {
      return {
          tag: "literal",
          type: "number",
          value: val
      }
  }

  function node_string(val) {
      return {
          tag: "literal",
          type: "string",
          value: val
      }
  }

  function node_boolean(val) {
      return {
          tag: "literal",
          type: "string",
          value: val
      }
  }

  function node_unit() {
      return {
          tag: "literal",
          type: "unit",
          value: undefined
      }
  }

  function node_binexpr(repr, left, right) {
      return {
          tag: "binexpr",
          repr: repr,
          left: left,
          right: right
      }
  }

  function node_condition(condition, consequence, alternative) {
      return {
          tag: "condition",
          condition: condition,
          consequence: consequence,
          alternative: alternative
      }
  }


  function node_function(name, params, body) {
      return {
          tag: "function",
          name: name,
          params: params,
          body: body
      }
  }

  function node_lambda(params, body) {
      return {
          tag: "lambda",
          type: "function",
          params: params,
          body: body
      }
  }

  function node_accessor(primary, accessors) {
      return {
          tag: "accessor",
          primary: primary,
          accessors: accessors
      }
  }

  function node_method_call(name, args) {
      return {
          tag: "method_call",
          name: name,
          args: args
      }
  }

  function node_funcall(fun, args) {
      return {
          tag: "funcall",
          fun: fun,
          args: args
      }
  }

  function node_comprehension(expr, binding) {
      return {
          tag: "comprehension",
          expr: expr,
          binding: binding
      }
  };

  function node_statements(statements) {
      return {
          tag: "statements",
          statements: statements
      }
  }

  function node_statement(statement, comment) {
      return {
          tag: "statement",
          statement: statement,
          comment: comment
      }
  }

  function node_comment(comment) {
      return {
          tag: "comment",
          comment: comment
      }
  }

  function node_exprlist(exprs) {
      return {
          tag: "exprlist",
          exprs: exprs
      }
  }

  function node_letbinding(bindings) {
      return {
          tag: "let",
          bindings: bindings
      }
  }

  function node_binding(variable, expr) {
      return {
          tag: "binding",
          variable: variable,
          expr: expr
      }
  }

  var keywords = [
      "let", "in", 
      "if", "else", "then", "end", 
      "lambda",
      "true", "false"
  ];
  var reserved_symbols = [":=", "->", "#", ":", "|"];

  var escape_mapping = {
      'e': "\e",
      "t": "\t",
      "\\": "\\",
      "n": "\n",
      "r": "\r",
      "b": "\b"
  };

  function keyword(tag) {
      keywords.push(tag);
      return function(value = undefined) {
          return new Token(tag, value, true, false)
      };
  }

  function util_concat(l, r) {
      if (r) {
          return l.concat(r)
      }
      return l;
  }

  function util_leftmost(op, ex) {
      while(op.left) {
      	op = op.left
      }
      op.left = ex
  }

  var token_lambda = keyword("lambda");



  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
